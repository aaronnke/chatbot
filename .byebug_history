c
entities
date_time
c
url
data2.parse
data2 = HTTP.headers('api-key' => consumer_key).get(url)
data
c
entities
c
entities['contact']
entities['contact]
entities['joke_type'][0]
entities
c
location.upcase
location
location.capitalize!
location.capitalize
location.capitalise
location
c
data['forecasts']
c
data[0]
location
data['forecasts'].index{ |loc| loc['area'] == location }
data['forecasts']
data
c
data.parse['items'][0]['valid_period']['start'].slice(0,19)
data.parse['items'][0]['valid_period']['start'].slice(0,10)
data.parse['items'][0]['valid_period']['start'].to_date
data.parse['items'][0]['valid_period']['start'].toDate
data.parse['items'][0]['valid_period']['start']
data.parse['items'][0]['valid_period']
data.parse['items'][0]
data.parse['items']
data.parse['items]
data
data.parse['items'][0]['forecasts'][0]
data.parse['items'][0]['forecasts']
data.parse['items'][0]
data.parse['items']['forecasts']
data.parse['items']
data.parse['items]
data.parse
data
c
entities['location'][0]['value']
entities['intent'][0]['value']
entities['intent'][0]
entities['intent']
entities
c
entities['datetime'][0]['value'].slice(0,19)
entities['datetime'][0]['value'].slice(0,20)
entities['datetime'][0]['value'].slice(0,24)
entities['datetime'][0]['value']
entities['datetime']
puts 'yay' if is_defined?('sdf')
puts 'yay' if sdf.is_defined?
puts 'yay' if sdf
entities['datetime'][0]['value'].slice(0,10)
entities['datetime'][0]['value'].slice(0,12)
entities['datetime'][0]['value'].slice(0,6)
entities['datetime'][0]['value']
entities['datetime'][0]
entities['datetime']
entities
c
reply.parse['items'][0]['readings'][0]['value']
reply.parse['items'][0]['readings'][0]
reply.parse['items'][0]['readings'].each do |x| p x end
reply.parse['items'][0]['readings'][0]
reply.parse['items'][0]['readings']
reply.parse['items'][0]
reply.parse['items']
reply.parse['metadata']['items']
reply.parse['metadata']
reply.parse
reply.content_type
reply.code
reply.content
reply
reply.metadata
reply.length
reply[0]
reply.body.readpartial
reply.body.read
reply.body['metadata']
reply['metadata']
puts reply
reply.body
reply.data
reply.body
reply
c
https.use_ssl?
https.use_ssl
https
req['api-key']
req
https.request(req)
c
rsp['entities']['intent'][0]['value']
rsp['entities']['intent'][0]
rsp['entities']['intent'].value
rsp['entities']['intent']
rsp['entities']['datetime']
rsp['entities']
response['entities']
